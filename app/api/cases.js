import supabase from '../utils/supabase';

/**
 * Upewnia siÄ™, Å¼e uÅ¼ytkownik istnieje w tabeli users
 * Tworzy rekord jeÅ›li nie istnieje (upsert)
 */
async function ensureUserExists() {
  const user = supabase.auth.user();
  
  if (!user) {
    throw new Error('UÅ¼ytkownik nie jest zalogowany');
  }

  // SprawdÅº czy user istnieje w custom tabeli users
  const { data: existingUser, error: selectError } = await supabase
    .from('users')
    .select('id')
    .eq('id', user.id)
    .single();

  if (selectError && selectError.code !== 'PGRST116') { // PGRST116 = not found
    console.error('BÅ‚Ä…d sprawdzania uÅ¼ytkownika:', selectError);
    throw selectError;
  }

  // JeÅ›li user nie istnieje, utwÃ³rz go
  if (!existingUser) {
    console.log('ðŸ”„ Tworzenie rekordu uÅ¼ytkownika w bazie danych...');
    
    const { error: insertError } = await supabase
      .from('users')
      .insert([{
        id: user.id,
        email: user.email,
        full_name: user.user_metadata?.full_name || user.email?.split('@')[0] || 'UÅ¼ytkownik',
      }]);

    if (insertError) {
      console.error('BÅ‚Ä…d tworzenia uÅ¼ytkownika:', insertError);
      throw insertError;
    }

    console.log('âœ… UÅ¼ytkownik utworzony w bazie danych');
  }

  return user;
}

/**
 * Pobiera wszystkie sprawy dla zalogowanego uÅ¼ytkownika
 */
export async function getCases() {
  try {
    // Upewnij siÄ™, Å¼e user istnieje w tabeli users
    const user = await ensureUserExists();

    const { data, error } = await supabase
      .from('cases')
      .select('*')
      .eq('user_id', user.id)
      .order('created_at', { ascending: false });

    if (error) {
      console.error('BÅ‚Ä…d pobierania spraw:', error);
      throw error;
    }

    return data || [];
  } catch (error) {
    console.error('getCases error:', error);
    throw error;
  }
}

/**
 * Tworzy nowÄ… sprawÄ™
 */
export async function createCase({ title, description, documentType }) {
  try {
    // Upewnij siÄ™, Å¼e user istnieje w tabeli users
    const user = await ensureUserExists();

    // Przygotuj dane do zapisu
    const caseData = {
      title: title.trim(),
      description: description?.trim() || null,
      user_id: user.id,
      status: 'active',
      // Dodamy document_type_id pÃ³Åºniej, gdy bÄ™dziemy mieÄ‡ typy dokumentÃ³w w bazie
    };

    const { data, error } = await supabase
      .from('cases')
      .insert([caseData])
      .select()
      .single();

    if (error) {
      console.error('BÅ‚Ä…d tworzenia sprawy:', error);
      throw error;
    }

    console.log('âœ… Sprawa utworzona:', data);
    return data;
  } catch (error) {
    console.error('createCase error:', error);
    throw error;
  }
}

/**
 * Aktualizuje sprawÄ™
 */
export async function updateCase(caseId, updates) {
  try {
    // Supabase v1.x - uÅ¼yj auth.user() zamiast auth.getUser()
    const user = supabase.auth.user();
    
    if (!user) {
      throw new Error('UÅ¼ytkownik nie jest zalogowany');
    }

    const { data, error } = await supabase
      .from('cases')
      .update(updates)
      .eq('id', caseId)
      .eq('user_id', user.id) // Zabezpieczenie - uÅ¼ytkownik moÅ¼e edytowaÄ‡ tylko swoje sprawy
      .select()
      .single();

    if (error) {
      console.error('BÅ‚Ä…d aktualizacji sprawy:', error);
      throw error;
    }

    return data;
  } catch (error) {
    console.error('updateCase error:', error);
    throw error;
  }
}

/**
 * Usuwa sprawÄ™
 */
export async function deleteCase(caseId) {
  try {
    // Supabase v1.x - uÅ¼yj auth.user() zamiast auth.getUser()
    const user = supabase.auth.user();
    
    if (!user) {
      throw new Error('UÅ¼ytkownik nie jest zalogowany');
    }

    const { error } = await supabase
      .from('cases')
      .delete()
      .eq('id', caseId)
      .eq('user_id', user.id); // Zabezpieczenie

    if (error) {
      console.error('BÅ‚Ä…d usuwania sprawy:', error);
      throw error;
    }

    console.log('âœ… Sprawa usuniÄ™ta:', caseId);
    return true;
  } catch (error) {
    console.error('deleteCase error:', error);
    throw error;
  }
} 